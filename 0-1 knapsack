//using recursion
import java.util.*;
public class knapsack{
    public static void main(String[] args) {
        int[] val = {15, 14 , 10, 45, 30};
        int[] wt = {2, 5, 1, 3, 4};
        int W=7;
        System.out.println(knap(val,wt,W,val.length));
    }
    static int knap(int[] val,int[] wt,int W,int n) {
        if(n==0 || W==0) return 0;
        if(wt[n-1] <= W){
            int ans1=val[n-1] + knap(val,wt,W-wt[n-1],n-1);
            int ans2=knap(val,wt,W,n-1);
            return Math.max(ans1,ans2);
        }else{
            return knap(val,wt,W,n-1);
        }
    }
}


//using memoisation
import java.util.*;
public class knapsack{
    public static void main(String[] args) {
        int[] val = {15, 14 , 10, 45, 30};
        int[] wt = {2, 5, 1, 3, 4};
        int W=7;
        int n= val.length;
        int[][] dp = new int[n+1][W+1];
        for(int i=0;i<dp.length;i++) {
            for(int j=0;j<dp[0].length;j++){
                dp[i][j] = -1;
            }
        }
        System.out.println(knap(val,wt,W,n,dp));
    }
    static int knap(int[] val,int[] wt,int W,int n,int[][] dp) {
        if(n==0 || W==0) return 0;

        if(dp[n][W] !=-1){
            return dp[n][W];
        }
        if(wt[n-1] <= W){
            int ans1=val[n-1] + knap(val,wt,W-wt[n-1],n-1,dp);
            int ans2=knap(val,wt,W,n-1,dp);
            dp[n][W] = Math.max(ans1,ans2);
            return dp[n][W];
        }else{
            dp[n][W] = knap(val,wt,W,n-1,dp);
            return dp[n][W];
        }
    }
}


// Using tabulation
import java.util.*;
public class knapsack{
    public static void main(String[] args) {
        int[] val = {15, 14 , 10, 45, 30};
        int[] wt = {2, 5, 1, 3, 4};
        int W=7;
        System.out.println(knap(val,wt,W));
    }
    static int knap(int[] val,int[] wt,int W) {
        int n=val.length;
        int[][] dp=new int[n+1][W+1];
        for(int i=0;i<dp.length;i++){
            dp[i][0]=0;
        }
        for(int j=0;j<dp[0].length;j++){
            dp[0][j]=0;
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<W+1;j++){
                int v=val[i-1];
                int w=wt[i-1];
                if(w<=j){
                int ans1=v+dp[i-1][j-w];
                int ans2= dp[i-1][j];
                dp[i][j] = Math.max(ans1,ans2);
                }
                else{
                    dp[i][j]= dp[i-1][j];

                }
            }
        }
        return dp[n][W];
    }
}
